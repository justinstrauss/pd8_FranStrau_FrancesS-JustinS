Justin's Logs:
5/26/14 - I created the GitHub repo, submitted the Google form, and emailed Mr. Brown our project proposal.
5/27/14 - Frances and I decided to implement a bottom up approach to programming by coding the Seat, Plane, and Driver classes first, before piecing things together to give rise to the more complex reservation system.
5/28/14 - I found OpenFlights route database in the form of a .dat file, which we can Javafy using the Scanner class. Then, we can use this info to verify that the flights users are requesting exist in real life.
5/29/14 - I realized that we can generate a relatively accurate base fare for flights by using the GPS coordinates of origin and destination airports to calculate the number of miles between them. Then, we can scale this price based on the supply of remaining seats, which decreases as the date of departure approaches.  
5/30/14 - Instead of making individual RouteList, AirlineList, and AirportList classes, I decided to modify RouteList to turning it into a generalized ListMaker class.
6/2/14 - Frances and I troubleshooted to get the Pilot, Route, and ListMaker classes to work with each other.
6/3/14 - I fixed an error in printDirects() that made it print duplicates of all of the airline codes.
6/4/15 - I decided against having a dedicated Airlines class, since we donâ€™t need each airline to be an object. Instead, I began coding the method to translate the airline code to the airline name within the Route class.
6/6/14 - 

Frances's Logs:
5/26/14 - I worked out our project idea with Justin and we came up with a basic idea
5/27/14 - I came up with parts of the project: cancelations, the simulation aspect, inputting the date and we decided on the structure: Super class vs. Interface
5/28/14 - I created the base of our Driver file (Pilot.java)
5/30/14 - I wrote most of Route.java which searches for direct routes and transfer locations
